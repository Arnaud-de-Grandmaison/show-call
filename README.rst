================================
`show-call` - C++ call explorer
================================

.. contents::
   :local:


About `show-call`
=================

`show-call` is a program based on clang's tooling infrastructure that I wrote
to show how calls in a C++ program are resolved, in terms of lookup as well as
overload. It was mostly written for my own education, as I wanted to play with
clang's tooling infrastructure and needed a small enough project.

Building
========

In order to build and use `show-call`, a full `llvm` + `clang` + `tools-extra`
source tree is required. Those instructions do not cover how to configure or
build the full installation, but only how to integrate `show-call` to it.

The first step is to drop the `show-call` source code in the source tree:

.. code-block:: console

   % cd llvm.git/tools/clang/tools/extra
   % tar xfz show-call.tar.gz

The second step is to add it to the build system. For the `cmake` case, this
would look like:

.. code-block:: console

   % cd llvm.git/tools/clang/tools/extra
   % vi CMakeLists.txt
   ... add add_subdirectory(show-call)

Et voil√† ! Now a simple `make` or `ninja` in your build directory should
build `show-call`.

Usage
=====

Being based on clang's tooling infrastructure, `show-call` expects to find
a compilation database: a file named `compile_commands.json` which can be
generated by `cmake`.

Assuming you have a such a compilation database, and that `show-call` is in
your search path:

.. code-block:: console

   % show-call file-to-analyze.cpp

If you do not have a compilation database, or simply want to override its
content:

.. code-block:: console

   % show-call file-to-analyze.cpp
   % show-call file2-to-analyze.cpp -- -DNDEBUG

Todo
====

A lot !

License
=======

See file `LICENSE`.
